'use client';
import { JSX , useState} from "react";
import uploadImage from "../lib/uploadImage";
import type { Image } from "../types/image";
import { createClient } from "@/utils/supabase/client";
import {useRouter} from "next/navigation";


export default  function ImageUploader(): JSX.Element {
    const router = useRouter();
    const supabase = createClient();
   
const [file, setFile] = useState<File | null>(null);
const [altText, setAltText] = useState<string>('');
const [description, setDescription] = useState<string>('');
const [isOpen, setIsOpen] = useState<boolean>(false);
const [isLoading, setIsLoading] = useState<boolean>(false);


const  handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
  const uploadedfile: File| null = event.target.files?.[0] || null;

    if (uploadedfile && uploadedfile.type.startsWith('image/')) {
      setFile(uploadedfile);
    } else {
      setFile(null);
    }
}

const handleAltTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {
  setAltText(event.target.value);
}

const handleDescriptionChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
  setDescription(event.target.value);
}   

const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
  event.preventDefault();

  setIsLoading(true);
    if (!file || !altText) return;


    const imgUrl = await uploadImage(file);
    if (imgUrl instanceof Error) {
      console.error('Upload failed:', imgUrl.message);
      return;
    }
    // Get the current user ID from Supabase
     const { data, error } = await supabase.auth.getUser();
    if (error || !data?.user) {
      console.error('User not authenticated');
      return;
    }

    const user_id = data.user.id;

    const imageData: Image= {
        id : '', // This is auto  generated by  database
        url: imgUrl.url,
        alt_text: altText,
        description: description,
        uploaded_by: user_id, 
    }

  try{
     const res = await fetch('http://localhost:3000/api/images', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(imageData)
    }); 
    console.log(res.status);
    if (!res.ok) {
      console.error('Failed to save image metadata');
    }
    alert('Image uploaded successfully');
  } catch (error) {
    console.error('Error submitting image data:', error);
  }
  setIsLoading(false);
  setFile(null);
    setAltText('');
    setDescription('');
    setIsOpen(false);
    router.refresh();

};
  




    return(<div className="w-full">
        {!isOpen &&  <button
        onClick={() => setIsOpen(true)}
        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
      >
        Upload Image
      </button>}
        {isOpen && <form onSubmit={handleSubmit} className="flex flex-col gap-4 w-full max-w-md mx-auto p-6">
  {/* Image Upload */}
  <label htmlFor="image" className="flex flex-col gap-1">
    <span className="text-sm font-medium text-gray-700">Image</span>
    <input
      type="file"
      id="image"
      name="image"
        onChange={handleFileChange}
      accept="image/*"
      className="block w-full text-sm text-gray-700
                 file:mr-4 file:py-2 file:px-4
                 file:rounded-md file:border-0
                 file:text-sm file:font-semibold
                 file:bg-blue-50 file:text-blue-700
                 hover:file:bg-blue-100
                 focus:outline-none focus:ring-2 focus:ring-blue-500"
    />
  </label>

  {/* Alt Text */}
  <label htmlFor="altText" className="flex flex-col gap-1">
    <span className="text-sm font-medium text-gray-700">Alt Text</span>
    <input
    onChange={handleAltTextChange}
      type="text"
      id="altText"
      name="altText"
      placeholder="Describe the image"
      className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
    />
  </label>

  {/* Description */}
  <label htmlFor="description" className="flex flex-col gap-1">
    <span className="text-sm font-medium text-gray-700">Description</span>
    <textarea
    onChange={handleDescriptionChange}
      id="description"
      name="description"
      rows={4}
      placeholder="Enter a detailed description"
      className="border border-gray-300 rounded-md px-3 py-2 text-sm resize-none focus:ring-2 focus:ring-blue-500 focus:outline-none"
    />
  </label>

  {/* Submit Button */}
  <button
    type="submit"
    disabled={isLoading}
    className="bg-blue-600 text-white rounded-md px-4 py-2 font-medium hover:bg-blue-700 transition"
  >
    {isLoading ? "Uploading..." : "Upload"}
  </button>
</form>
}


    </div>)

}